#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Publish Docker
on:
  push:
    branches: [master,dev-*]

env:
  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.class=standard -Dmaven.wagon.http.retryHandler.count=3 -Dmaven.wagon.httpconnectionManager.ttlSeconds=120

jobs:
  publish-docker:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.0.0]
    timeout-minutes: 90
    env:
      TAG: ${{ github.sha }}
      SKIP_TEST: true
      HUB: ghcr.io/${{ github.repository }}
      LINKIS_VERSION: 1.8.0
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 8
    - name: Cache local Maven repository
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Build frontend by node.js
      run: |
          cd linkis-web
          sed -i "/VUE_APP_MN_CONFIG_PREFIX/d" .env
          npm install
          npm run build

    - name: Build backend by maven
      run: |
          ./mvnw install -Pdocker -Dmaven.javadoc.skip=true -Dmaven.test.skip=true -Dlinkis.build.web=true -Dlinkis.build.ldh=true
    - name: Log in to the Container registry
      uses: docker/login-action@v1.10.0
      with:
        registry: ${{ env.HUB }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Push Docker Image
      env:
        DOCKER_VERSION: ${{ github.ref_name }}-${{ github.sha }}
      run: |
        docker images
        docker tag linkis:${{ env.LINKIS_VERSION }} ${{ env.HUB }}/linkis:${{ env.DOCKER_VERSION }}
        docker push ${{ env.HUB }}/linkis:${{ env.DOCKER_VERSION }}

        docker tag linkis:${{ env.LINKIS_VERSION }} ${{ env.HUB }}/linkis:latest
        docker push ${{ env.HUB }}/linkis:latest

        docker tag linkis-web:${{ env.LINKIS_VERSION }} ${{ env.HUB }}/linkis-web:${{ env.DOCKER_VERSION }}
        docker push ${{ env.HUB }}/linkis-web:${{ env.DOCKER_VERSION }}

        docker tag linkis-web:${{ env.LINKIS_VERSION }} ${{ env.HUB }}/linkis-web:latest
        docker push ${{ env.HUB }}/linkis-web:latest

        docker tag linkis-ldh:${{ env.LINKIS_VERSION }} ${{ env.HUB }}/linkis-ldh:${{ env.DOCKER_VERSION }}
        docker push ${{ env.HUB }}/linkis-ldh:${{ env.DOCKER_VERSION }}

        docker tag linkis-ldh:${{ env.LINKIS_VERSION }} ${{ env.HUB }}/linkis-ldh:latest
        docker push ${{ env.HUB }}/linkis-ldh:latest
