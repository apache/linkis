---
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ include "linkis.fullname" . }}-linkis-config
data:
  log4j2-console.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration status="INFO">
      <Appenders>
        <Console name="Console" target="SYSTEM_OUT">
          <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
        </Console>
      </Appenders>
      <Loggers>
        <Root level="info">
          <AppenderRef ref="Console"/>
        </Root>
      </Loggers>
    </Configuration>

  log4j2.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration status="error" monitorInterval="30">
        <Appenders>
            <RollingFile name="RollingFile" append="true" fileName="${env:LINKIS_LOG_DIR}/${sys:serviceName}.log"
                         filePattern="${env:LINKIS_LOG_DIR}/$${date:yyyy-MM}/${sys:serviceName}/linkis-log-%d{yyyy-MM-dd-hh}-%i.log">
                <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] [%-40t] %c{1.} (%L) [%M] - %msg%xEx%n"/>
                <Policies>
                    <SizeBasedTriggeringPolicy size="100MB"/>
                </Policies>
                <DefaultRolloverStrategy max="10"/>
            </RollingFile>
            <Console name="Console" target="SYSTEM_OUT">
               <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
            </Console>
        </Appenders>
        <Loggers>
            <Root level="INFO">
                <AppenderRef ref="RollingFile"/>
                <AppenderRef ref="Console"/>
            </Root>
        </Loggers>
    </Configuration>

  linkis-env.sh: |
    export LINKIS_VERSION={{ .Chart.AppVersion }}
    export LINKIS_PUBLIC_MODULE=lib/linkis-commons/public-module
    export LINKIS_COMMONS_LIB={{ .Values.linkis.locations.homeDir }}/lib/linkis-commons/public-module
    export LINKIS_LOG_DIR={{ .Values.linkis.locations.logDir }}

  token.properties: |
    ## http API token authentication
    ## Token-Code=Token-User
    ## eg:TEST-AUTH=hadoop,root,user01
    ### http request with header { Token-Code:TEST-AUTH,Token-User:user01 }
    LINKIS-AUTH=*

  application-linkis.yml: |
    debug: {{ .Values.linkis.featureGates.testMode }}
    eureka:
      instance:
        prefer-ip-address: true
        instance-id: ${spring.cloud.client.ip-address}:${spring.application.name}:${server.port}
        lease-renewal-interval-in-seconds: 4
        lease-expiration-duration-in-seconds: 12
      client:
        serviceUrl:
          defaultZone: {{- include "linkis.registration.url" . | quote | indent 1 }}
        registry-fetch-interval-seconds: 8
    management:
      endpoints:
        web:
          exposure:
            include: refresh,info
    logging:
      config: classpath:log4j2.xml
    springfox:
      documentation:
        enabled: false
        auto-startup: false
        swagger-ui:
          enabled: false

    pagehelper:
      helper-dialect: mysql
      reasonable: true
      support-methods-arguments: true
      params: countSql
    spring:
      cloud:
        loadbalancer:
          cache:
            enabled: false
      main:
        allow-circular-references: true
      mvc:
        pathmatch:
          matching-strategy: ant_path_matcher

    #ribbon:
    #  ReadTimeout: 10000
    #  ConnectTimeout: 10000

    ##disable  kinif4j.production when you want to use apidoc during development
    knife4j:
      enable: false
      production: false

  application-eureka.yml: |
    spring:
      application:
        name: linkis-mg-eureka
      profiles: eureka
      cloud:
        loadbalancer:
          cache:
            enabled: false
      main:
        allow-circular-references: true
      mvc:
        pathmatch:
          matching-strategy: ant_path_matcher
      freemarker:
        cache: false
        prefer-file-system-access: false
    server:
      port: {{ .Values.mgEureka.port }}
    springfox:
      documentation:
        enabled: false
        auto-startup: false
        swagger-ui:
          enabled: false
    eureka:
      instance:
        preferIpAddress: true
        hostname: ${spring.cloud.client.ip-address}
      client:
        register-with-eureka: false
        fetch-registry: false
        serviceUrl:
          defaultZone: {{- include "linkis.registration.url" . | quote | indent 1 }}
        enable-self-preservation: false
        eviction-interval-timer-in-ms: 3000
      server:
        enable-self-preservation: false
        eviction-interval-timer-in-ms: 5000
        response-cache-update-interval-ms: 3000

  application-engineconn.yml: |
    spring:
      application:
        name: linkis-cg-engineconn
      cloud:
        loadbalancer:
          cache:
            enabled: false
      main:
        allow-circular-references: true
      mvc:
        pathmatch:
          matching-strategy: ant_path_matcher
      servlet:
        multipart:
          max-file-size: 500MB
          max-request-size: 500MB
          file-size-threshold: 50MB
    eureka:
      instance:
        prefer-ip-address: true
        instance-id: ${spring.cloud.client.ip-address}:${spring.application.name}:${server.port}
        lease-renewal-interval-in-seconds: 4
        lease-expiration-duration-in-seconds: 12
      client:
        serviceUrl:
           defaultZone: {{- include "linkis.registration.url" . | quote | indent 1 }}
        registry-fetch-interval-seconds: 8
        initial-instance-info-replication-interval-seconds: 10
    springfox:
      documentation:
        enabled: false
        auto-startup: false
        swagger-ui:
          enabled: false
    management:
      endpoints:
        web:
          exposure:
            include: refresh,info,health,metrics

    logging:
      config: classpath:log4j2.xml

  linkis-cli.properties: |
    #wds.linkis.client.common.creator=LINKISCLI
    wds.linkis.client.common.gatewayUrl={{- include "linkis.gateway.url" . }}
    wds.linkis.client.common.authStrategy=token
    wds.linkis.client.common.tokenKey=Validation-Code
    wds.linkis.client.common.tokenValue=LINKIS-AUTH
    spring.spring.mvc.pathmatch.matching-strategy=ant_path_matcher
    spring.spring.cloud.loadbalancer.cache.enabled=false
    springfox.documentation.enabled=false
    springfox.documentation.auto-startup=false
    springfox.documentation.swagger-ui.enabled=false
    #wds.linkis.client.noncustomizable.enable.user.specification=true
    #wds.linkis.client.noncustomizable.enable.proxy.user=true

  linkis.properties: |
    ##enable wds.linkis.test.mode where use knife4j
    wds.linkis.test.mode={{ .Values.linkis.featureGates.testMode }}
    wds.linkis.test.user=hadoop
    wds.linkis.server.version=v1
    ##spring conf
    wds.linkis.gateway.url={{- include "linkis.gateway.url" . }}

    wds.linkis.multiple.yarn.cluster=false
    linkis.discovery.prefer-ip-address=true
    linkis.discovery.server-address={{- include "linkis.registration.url" . }}

    ##mybatis
    wds.linkis.server.mybatis.datasource.url={{- include "linkis.datasource.url" . }}
    wds.linkis.server.mybatis.datasource.username={{ .Values.linkis.datasource.username }}
    wds.linkis.server.mybatis.datasource.password={{ .Values.linkis.datasource.password }}
    # mysql
    wds.linkis.mysql.is.encrypt=false
    linkis.mysql.strong.security.enable=false
    linkis.mysql.force.params=allowLoadLocalInfile=false&autoDeserialize=false&allowLocalInfile=false&allowUrlInLocalInfile=false
    linkis.mysql.sensitive.params=allowLoadLocalInfile,autoDeserialize,allowLocalInfile,allowUrlInLocalInfile,#

    #hadoop/hive/spark config
    hadoop.config.dir=/etc/hadoop-conf
    hive.config.dir=/etc/hive-conf
    spark.config.dir=/etc/spark-conf

    {{- if .Values.linkis.featureGates.localMode }}
    ##file path
    wds.linkis.filesystem.root.path=file://{{ .Values.linkis.locations.runtimeDir }}
    wds.linkis.filesystem.hdfs.root.path=file://{{ .Values.linkis.locations.runtimeDir }}
    ##bml path: use local
    wds.linkis.bml.is.hdfs=false
    wds.linkis.bml.local.prefix={{ .Values.linkis.locations.runtimeDir }}
    {{- else }}
    ##file path
    wds.linkis.filesystem.root.path=file://{{ .Values.linkis.locations.runtimeDir }}
    wds.linkis.filesystem.hdfs.root.path=hdfs://{{ .Values.linkis.locations.runtimeDir }}
    ##bml path:default use hdfs
    wds.linkis.bml.is.hdfs=true
    wds.linkis.bml.local.prefix=/apps-data
    {{- end }}

    ##engine Version
    #wds.linkis.spark.engine.version=
    #wds.linkis.hive.engine.version=
    #wds.linkis.python.engine.version=
    #LinkisHome
    wds.linkis.home={{ .Values.linkis.locations.homeDir }}
    #Linkis governance station administrators
    wds.linkis.governance.station.admin=hadoop
    #wds.linkis.gateway.conf.publicservice.list=query,jobhistory,application,configuration,filesystem,udf,variable,microservice,errorcode,bml,datasource
    spring.spring.servlet.multipart.max-file-size=500MB
    spring.spring.servlet.multipart.max-request-size=500MB
    # note:value of zero means Jetty will never write to disk.
    spring.spring.servlet.multipart.file-size-threshold=50MB
    spring.spring.main.allow-circular-references=true
    spring.spring.mvc.pathmatch.matching-strategy=ant_path_matcher
    spring.spring.cloud.loadbalancer.cache.enabled=false
    springfox.documentation.enabled=false
    springfox.documentation.auto-startup=false
    springfox.documentation.swagger-ui.enabled=false

  linkis-mg-gateway.properties: |
    #wds.linkis.server.restful.uri=/
    wds.linkis.test.mode={{ .Values.linkis.featureGates.testMode }}
    wds.linkis.test.user=hadoop
    wds.linkis.server.web.session.timeout=1h
    wds.linkis.gateway.conf.enable.proxy.user=false
    wds.linkis.gateway.conf.url.pass.auth=/dss/
    wds.linkis.gateway.conf.enable.token.auth=true
    wds.linkis.is.gateway=true
    wds.linkis.server.mybatis.mapperLocations=classpath*:mapper/common/*.xml,classpath*:mapper/mysql/*.xml
    wds.linkis.server.mybatis.typeAliasesPackage=org.apache.linkis.instance.label.entity,org.apache.linkis.jobhistory.entity
    wds.linkis.server.mybatis.BasePackage=org.apache.linkis.instance.label.dao,org.apache.linkis.gateway.authentication.dao,org.apache.linkis.jobhistory.dao
    wds.linkis.label.entity.packages=org.apache.linkis.gateway.ujes.route.label
    wds.linkis.login_encrypt.enable=false
    ##LDAP:q
    wds.linkis.ldap.proxy.url=
    wds.linkis.ldap.proxy.baseDN=:q!
    wds.linkis.ldap.proxy.userNameFormat=
    wds.linkis.admin.user=hadoop
    wds.linkis.admin.password=4f90c1b13
    ##Spring
    spring.server.port={{ .Values.mgGateway.port }}
    ## you may set service version if you want to distinguish different configuration version
    spring.eureka.instance.metadata-map.linkis.conf.version=v1
    spring.spring.mvc.pathmatch.matching-strategy=ant_path_matcher
    spring.spring.cloud.loadbalancer.cache.enabled=false
    springfox.documentation.enabled=false
    springfox.documentation.auto-startup=false
    springfox.documentation.swagger-ui.enabled=false

  linkis-cg-linkismanager.properties: |
    ##mybatis
    wds.linkis.server.mybatis.mapperLocations=classpath*:mapper/common/*.xml,classpath*:mapper/mysql/*.xml
    wds.linkis.server.mybatis.typeAliasesPackage=
    wds.linkis.server.mybatis.BasePackage=org.apache.linkis.manager.dao,org.apache.linkis.manager.rm.external.dao,org.apache.linkis.publicservice.common.lock.dao,org.apache.linkis.engineplugin.server.dao

    linkis.engineConn.plugin.cache.expire-in-seconds=100000
    wds.linkis.engineconn.dist.load.enable=true
    #wds.linkis.engineconn.home=/appcom/Install/LinkisInstall/lib/linkis-engineconn-plugins
    #wds.linkis.engineconn.plugin.loader.store.path=/appcom/Install/LinkisInstall/lib/linkis-engineconn-plugins

    ## you may set service version if you want to distinguish different configuration version
    spring.eureka.instance.metadata-map.linkis.conf.version=v1
    spring.spring.mvc.pathmatch.matching-strategy=ant_path_matcher
    spring.spring.cloud.loadbalancer.cache.enabled=false
    springfox.documentation.enabled=false
    springfox.documentation.auto-startup=false
    springfox.documentation.swagger-ui.enabled=false

    ##Spring
    spring.server.port={{ .Values.cgLinkisManager.port }}


  linkis-cg-engineconnmanager.properties: |
    wds.linkis.engineconn.root.dir={{ .Values.linkis.locations.runtimeDir }}/appcom

    ##Spring
    spring.server.port={{ .Values.cgEngineConnManager.port }}

    ##set engine environment in econn start script, such as SPARK3_HOME,the value of env will read from ecm host by key.
    #wds.linkis.engineconn.env.keys=SPARK3_HOME,

    spring.eureka.instance.metadata-map.linkis.conf.version=v1
    spring.spring.mvc.pathmatch.matching-strategy=ant_path_matcher
    spring.spring.cloud.loadbalancer.cache.enabled=false
    springfox.documentation.enabled=false
    springfox.documentation.auto-startup=false
    springfox.documentation.swagger-ui.enabled=false


  linkis-cg-engineplugin.properties: |
    wds.linkis.test.mode={{ .Values.linkis.featureGates.testMode }}
    wds.linkis.engineconn.debug.enable={{ .Values.linkis.featureGates.enableEngineConnDebug }}

    ##mybatis
    wds.linkis.server.mybatis.mapperLocations=classpath:org/apache/linkis/engineplugin/server/dao/impl/*.xml
    wds.linkis.server.mybatis.typeAliasesPackage=
    wds.linkis.server.mybatis.BasePackage=org.apache.linkis.engineplugin.server.dao
    linkis.engineConn.plugin.cache.expire-in-seconds=100000
    wds.linkis.engineconn.dist.load.enable=true
    #wds.linkis.engineconn.home=/appcom/Install/LinkisInstall/lib/linkis-engineconn-plugins
    #wds.linkis.engineconn.plugin.loader.store.path=/appcom/Install/LinkisInstall/lib/linkis-engineconn-plugins

    ##Spring
    spring.server.port={{ .Values.cgEnginePlugin.port }}
    spring.spring.mvc.pathmatch.matching-strategy=ant_path_matcher
    spring.spring.cloud.loadbalancer.cache.enabled=false
    springfox.documentation.enabled=false
    springfox.documentation.auto-startup=false
    springfox.documentation.swagger-ui.enabled=false

  linkis-cg-entrance.properties: |
    ##restful
    wds.linkis.server.restful.scan.packages=org.apache.linkis.entrance.restful
    wds.linkis.server.socket.mode=false
    #wds.linkis.entrance.config.log.path=hdfs:///tmp/linkis/

    {{- if .Values.linkis.featureGates.localMode }}
    wds.linkis.resultSet.store.path=file://{{ .Values.linkis.locations.runtimeDir }}
    {{- else }}
    wds.linkis.resultSet.store.path=hdfs://{{ .Values.linkis.locations.runtimeDir }}
    {{- end }}

    ##mybatis
    wds.linkis.server.mybatis.mapperLocations=classpath*:mapper/common/*.xml,classpath*:mapper/mysql/*.xml
    wds.linkis.server.mybatis.BasePackage=org.apache.linkis.publicservice.common.lock.dao
    wds.linkis.server.mybatis.typeAliasesPackage=org.apache.linkis.publicservice.common.lock.entity

    ##Spring
    spring.server.port={{ .Values.cgEntrance.port }}

    wds.linkis.entrance.user.creator.ip.interceptor.switch=false

    ## you may set service version if you want to distinguish different configuration version
    spring.eureka.instance.metadata-map.linkis.conf.version=v1
    spring.spring.mvc.pathmatch.matching-strategy=ant_path_matcher
    spring.spring.cloud.loadbalancer.cache.enabled=false
    springfox.documentation.enabled=false
    springfox.documentation.auto-startup=false
    springfox.documentation.swagger-ui.enabled=false

  linkis-ps-publicservice.properties: |
    wds.linkis.server.mdm.service.instance.expire-in-seconds=1800
    linkis.workspace.filesystem.auto.create=true
    ##restful
    wds.linkis.server.restful.scan.packages=org.apache.linkis.cs.server.restful,org.apache.linkis.datasourcemanager.core.restful,org.apache.linkis.metadata.query.server.restful,org.apache.linkis.jobhistory.restful,org.apache.linkis.variable.restful,org.apache.linkis.configuration.restful,org.apache.linkis.udf.api,org.apache.linkis.filesystem.restful,org.apache.linkis.filesystem.restful,org.apache.linkis.instance.label.restful,org.apache.linkis.metadata.restful.api,org.apache.linkis.cs.server.restful,org.apache.linkis.bml.restful,org.apache.linkis.errorcode.server.restful,org.apache.linkis.basedatamanager.server.restful

    ##mybatis
    wds.linkis.server.mybatis.mapperLocations=classpath*:mapper/common/*.xml,classpath*:mapper/mysql/*.xml
    wds.linkis.server.mybatis.typeAliasesPackage=org.apache.linkis.cs.persistence.entity,org.apache.linkis.datasourcemanager.common.domain,org.apache.linkis.datasourcemanager.core.vo,org.apache.linkis.configuration.entity,org.apache.linkis.jobhistory.entity,org.apache.linkis.udf.entity,org.apache.linkis.variable.entity,org.apache.linkis.instance.label.entity,org.apache.linkis.manager.entity,org.apache.linkis.metadata.domain,org.apache.linkis.bml.entity,org.apache.linkis.bml.Entity,org.apache.linkis.basedatamanager.server.domain
    wds.linkis.server.mybatis.BasePackage=org.apache.linkis.cs.persistence.dao,org.apache.linkis.datasourcemanager.core.dao,org.apache.linkis.jobhistory.dao,org.apache.linkis.variable.dao,org.apache.linkis.configuration.dao,org.apache.linkis.udf.dao,org.apache.linkis.instance.label.dao,org.apache.linkis.metadata.hive.dao,org.apache.linkis.metadata.dao,org.apache.linkis.bml.dao,org.apache.linkis.errorcode.server.dao,org.apache.linkis.publicservice.common.lock.dao,org.apache.linkis.basedatamanager.server.dao

    ##workspace
    wds.linkis.workspace.filesystem.hdfsuserrootpath.suffix=/
    wds.linkis.server.component.exclude.classes=org.apache.linkis.entranceclient.conf.ClientForEntranceSpringConfiguration,org.apache.linkis.entranceclient.conf.ClientSpringConfiguration,org.apache.linkis.entrance.conf.EntranceSpringConfiguration

    ##hive meta
    hive.meta.url={{ .Values.linkis.deps.hive.meta.url }}
    hive.meta.user={{ .Values.linkis.deps.hive.meta.user }}
    hive.meta.password={{ .Values.linkis.deps.hive.meta.password }}
    wds.linkis.metadata.hive.encode.enabled=false

    # associated with the logged-in user when querying metadata:default value is true
    #linkis.metadata.hive.permission.with-login-user-enabled
    #wds.linkis.jobhistory.undone.job.minimum.id=0
    #wds.linkis.jobhistory.undone.job.refreshtime.daily=00:15
    wds.linkis.cs.deserialize.replace_package_header.enable=false

    wds.linkis.rpc.conf.enable.local.message=true
    wds.linkis.rpc.conf.local.app.list=linkis-ps-publicservice

    ##Spring
    spring.server.port={{ .Values.psPublicService.port }}
    spring.spring.main.allow-bean-definition-overriding=true
    spring.spring.jackson.serialization.FAIL_ON_EMPTY_BEANS=false
    spring.spring.mvc.pathmatch.matching-strategy=ant_path_matcher
    spring.spring.cloud.loadbalancer.cache.enabled=false
    springfox.documentation.enabled=false
    springfox.documentation.auto-startup=false
    springfox.documentation.swagger-ui.enabled=false
    # ps-cs prefix must be started with 'cs_'
    spring.eureka.instance.metadata-map.route=cs_1_dev

    ## you may set service version if you want to distinguish different configuration version
    spring.eureka.instance.metadata-map.linkis.conf.version=v1
