<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to You under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~
  ~   http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.apache.linkis.configuration.dao.TemplateConfigKeyMapper">
  <resultMap id="BaseResultMap" type="org.apache.linkis.configuration.entity.TemplateConfigKey">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="template_name" jdbcType="VARCHAR" property="templateName" />
    <result column="template_uuid" jdbcType="VARCHAR" property="templateUuid" />
    <result column="key_id" jdbcType="BIGINT" property="keyId" />
    <result column="config_value" jdbcType="VARCHAR" property="configValue" />
    <result column="max_value" jdbcType="VARCHAR" property="maxValue" />
    <result column="min_value" jdbcType="VARCHAR" property="minValue" />
    <result column="validate_range" jdbcType="VARCHAR" property="validateRange" />
    <result column="is_valid" jdbcType="VARCHAR" property="isValid" />
    <result column="create_by" jdbcType="VARCHAR" property="createBy" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_by" jdbcType="VARCHAR" property="updateBy" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>


  <resultMap id="ResultMap" type="org.apache.linkis.configuration.entity.TemplateConfigKeyVO" extends="BaseResultMap">
    <result column="key" jdbcType="VARCHAR" property="key" />
  </resultMap>


  <sql id="Base_Column_List">
    id, template_name, template_uuid, key_id, config_value, max_value, min_value, validate_range, 
    is_valid, create_by, create_time, update_by, update_time
  </sql>

  <insert id="batchInsertList" parameterType="java.util.List">
    insert into linkis_ps_configuration_template_config_key (id, template_name, template_uuid,
    key_id, config_value, max_value,
    min_value, validate_range, is_valid,
    create_by, create_time, update_by, update_time
    )
    values
    <foreach collection="list" index="index" item="item" separator=",">
      (
      #{item.id,jdbcType=BIGINT}, #{item.templateName,jdbcType=VARCHAR}, #{item.templateUuid,jdbcType=VARCHAR},
      #{item.keyId,jdbcType=BIGINT}, #{item.configValue,jdbcType=VARCHAR}, #{item.maxValue,jdbcType=VARCHAR},
      #{item.minValue,jdbcType=VARCHAR}, #{item.validateRange,jdbcType=VARCHAR}, #{item.isValid,jdbcType=VARCHAR},
      #{item.createBy,jdbcType=VARCHAR}, now(), #{item.updateBy,jdbcType=VARCHAR}, now()
      )
    </foreach>
  </insert>

  <select id="selectListByTemplateUuid" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from linkis_ps_configuration_template_config_key
    where template_uuid = #{templateUuid,jdbcType=VARCHAR}
    order by id
  </select>

  <delete id="deleteByTemplateUuidAndKeyIdList" parameterType="java.util.List">
    delete
    from linkis_ps_configuration_template_config_key
    where template_uuid = #{templateUuid,jdbcType=VARCHAR}
    and key_id in
    <foreach collection="keyIdList" index="index" item="item" separator="," open="(" close=")">
      #{item}
    </foreach>
  </delete>

  <insert id="batchInsertOrUpdateList" parameterType="java.util.List">
    insert into linkis_ps_configuration_template_config_key (template_name, template_uuid,
    key_id, config_value, max_value,
    create_by, create_time, update_by, update_time
    )
    values
    <foreach collection="list" index="index" item="item" separator=",">
      (
      #{item.templateName,jdbcType=VARCHAR}, #{item.templateUuid,jdbcType=VARCHAR},
      #{item.keyId,jdbcType=BIGINT}, #{item.configValue,jdbcType=VARCHAR}, #{item.maxValue,jdbcType=VARCHAR},
      #{item.createBy,jdbcType=VARCHAR},
      <choose>
        <when test="item.createTime != null">
          #{item.createTime},
        </when>
        <otherwise>
          now(),
        </otherwise>
      </choose>
      #{item.updateBy,jdbcType=VARCHAR},
      <choose>
        <when test="item.updateTime != null">
          #{item.updateTime}
        </when>
        <otherwise>
          now()
        </otherwise>
      </choose>
      )
    </foreach>
    on duplicate key update
    template_name =values(template_name),
    config_value =values(config_value),
    max_value =values(max_value),
    update_by=values(update_by),
    update_time= now()
  </insert>

  <select id="selectListByTemplateUuidList" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from linkis_ps_configuration_template_config_key
    where template_uuid  in
    <foreach collection="templateUuidList" index="index" item="item" separator="," open="(" close=")">
      #{item}
    </foreach>
    order by id
  </select>


  <select id="selectInfoListByTemplateUuid" resultMap="ResultMap">
    select t.*, k.`key`
    from linkis_ps_configuration_template_config_key t
    JOIN linkis_ps_configuration_config_key  k
    ON k.id=t.key_id
    where t.template_uuid = #{templateUuid,jdbcType=VARCHAR}
  </select>


  <select id="selectInfoListByTemplateName" resultMap="ResultMap">
    select t.*, k.`key`
    from linkis_ps_configuration_template_config_key t
    JOIN linkis_ps_configuration_config_key  k
    ON k.id=t.key_id
    where t.template_name = #{templateName,jdbcType=VARCHAR}
  </select>



  <select id="selectEngineTypeByTemplateUuid" resultType="java.lang.String">
    select distinct(k.`engine_conn_type`) from linkis_ps_configuration_config_key  k
    where k.id in
      (
        select t.key_id from linkis_ps_configuration_template_config_key t
        where t.template_uuid = #{templateUuid,jdbcType=VARCHAR}
      )
  </select>

</mapper>
