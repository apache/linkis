<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to You under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~ 
  ~   http://www.apache.org/licenses/LICENSE-2.0
  ~ 
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="org.apache.linkis.udf.dao.UDFDao">
    <resultMap id="UDFResultMap" type="org.apache.linkis.udf.entity.UDFInfo">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="create_user" property="createUser" jdbcType="VARCHAR"/>
        <result column="udf_name" property="udfName" jdbcType="VARCHAR"/>
        <result column="udf_type" property="udfType" jdbcType="INTEGER"/>
        <result column="is_expire" property="isExpire" jdbcType="TINYINT"/>
        <result column="is_shared" property="isShared" jdbcType="TINYINT"/>
        <result column="tree_id" property="treeId" jdbcType="BIGINT"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="sys" property="sys" jdbcType="VARCHAR"/>
        <result column="cluster_name" property="clusterName" jdbcType="VARCHAR"/>
        <result column="description" property="description" jdbcType="VARCHAR"/>
    </resultMap>

    <resultMap id="UDFInfoMap" type="org.apache.linkis.udf.entity.UDFInfo">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="create_user" property="createUser" jdbcType="VARCHAR"/>
        <result column="udf_name" property="udfName" jdbcType="VARCHAR"/>
        <result column="udf_type" property="udfType" jdbcType="INTEGER"/>
        <result column="is_expire" property="isExpire" jdbcType="TINYINT"/>
        <result column="is_shared" property="isShared" jdbcType="TINYINT"/>
        <result column="tree_id" property="treeId" jdbcType="BIGINT"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="sys" property="sys" jdbcType="VARCHAR"/>
        <result column="cluster_name" property="clusterName" jdbcType="VARCHAR"/>
        <result column="is_load" property="isLoad" jdbcType="TINYINT"/>
    </resultMap>

    <resultMap id="UDFManagerMap" type="org.apache.linkis.udf.entity.UDFManager">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="user_name" property="userName" jdbcType="VARCHAR"/>
    </resultMap>

    <sql id="udf_Column_List">
        id, `create_user`, `udf_name`, `udf_type`,
        `is_expire`,`is_shared`,`tree_id`,`create_time`,`update_time`,`sys`,`cluster_name`
    </sql>
    <sql id="udf_info_List">
        id, `create_user`, `udf_name`, `udf_type`,
        `is_expire`,`is_shared`,`tree_id`,`create_time`,`update_time`,`sys`,`cluster_name`,`is_load`
    </sql>

    <insert id="addUDF" useGeneratedKeys="true" keyProperty="id" parameterType="org.apache.linkis.udf.entity.UDFInfo">
        INSERT INTO linkis_ps_udf_baseinfo (
        <include refid="udf_Column_List"/>
        ) VALUES (
        #{id,jdbcType=BIGINT},#{createUser,jdbcType=VARCHAR},#{udfName,jdbcType=VARCHAR},
        #{udfType,jdbcType=INTEGER},#{isExpire,jdbcType=TINYINT},#{isShared,jdbcType=TINYINT},
        #{treeId,jdbcType=BIGINT},#{createTime,jdbcType=TIMESTAMP},#{updateTime,jdbcType=TIMESTAMP},#{sys,jdbcType=VARCHAR},#{clusterName,jdbcType=VARCHAR}
        )
    </insert>

    <update id="updateUDF" parameterType="org.apache.linkis.udf.entity.UDFInfo">
        UPDATE linkis_ps_udf_baseinfo
        SET create_user=#{createUser,jdbcType=VARCHAR},
        udf_name=#{udfName,jdbcType=VARCHAR},
        udf_type=#{udfType,jdbcType=INTEGER},
        is_expire=#{isExpire,jdbcType=TINYINT},
        is_shared=#{isShared,jdbcType=TINYINT},
        tree_id=#{treeId,jdbcType=BIGINT},
        update_time=#{updateTime,jdbcType=TIMESTAMP}
        WHERE id = #{id,jdbcType=BIGINT}
    </update>

    <delete id="deleteUDF">
        DELETE FROM linkis_ps_udf_baseinfo
        where id = #{arg0} and create_user = #{arg1}
    </delete>

    <select id="getUDFById" resultMap="UDFResultMap">
        select
        <include refid="udf_Column_List"/>
        from linkis_ps_udf_baseinfo
        where id = #{arg0}
    </select>

    <delete id="deleteLoadInfo">
        DELETE FROM linkis_ps_udf_user_load
        where udf_id = #{arg0} and user_name = #{arg1}
    </delete>

    <insert id="addLoadInfo">
        INSERT INTO linkis_ps_udf_user_load (`udf_id`,`user_name`,`create_time`,`update_time`) VALUES (#{arg0},#{arg1},now(),now())
    </insert>

    <select id="getUDFSByUserName" resultMap="UDFResultMap">
        select
        <include refid="udf_Column_List"/>
        from linkis_ps_udf_baseinfo
        where create_user = #{arg0}
    </select>

    <select id="getUDFSByUsers" resultMap="UDFResultMap">
        SELECT
            info.id,info.`create_user`,info.`udf_name`,info.`udf_type`,info.`is_expire`,info.`is_shared`,info.`tree_id`,info.`create_time`,info.`update_time`,
            info.`sys`,info.`cluster_name`,udf_version.description
        FROM
            linkis_ps_udf_baseinfo info ,
            (SELECT
                udf_version.*
            FROM
                linkis_ps_udf_version udf_version , (
                SELECT
                  udf_id , MAX(bml_resource_version) AS bml_resource_version
                FROM
                   linkis_ps_udf_version
                GROUP BY
                udf_id) version_tmp
            WHERE
                version_tmp.udf_id = udf_version.udf_id
            AND version_tmp.bml_resource_version = udf_version.bml_resource_version) udf_version
        WHERE
            info.id = udf_version.udf_id
            AND info.create_user in
        <foreach collection="arg0" open="(" separator="," close=")" item="item">
            #{item}
        </foreach>
    </select>

    <select id="getSharedUDFByUser" resultMap="UDFResultMap">
        SELECT
            info.id,info.`create_user`,info.`udf_name`,info.`udf_type`,info.`is_expire`,info.`is_shared`,info.`tree_id`,info.`create_time`,info.`update_time`,
            info.`sys`,info.`cluster_name`,	version_tmp.description
        FROM
        linkis_ps_udf_baseinfo info ,
        (
            SELECT
                version_info.*
            FROM
                linkis_ps_udf_version version_info , (
                SELECT
                     udf_id , MAX(bml_resource_version) AS bml_resource_version
                FROM
                     linkis_ps_udf_version
                GROUP BY
                     udf_id
                ) version_max
            WHERE
                version_max.udf_id = version_info.udf_id
            AND version_max.bml_resource_version = version_info.bml_resource_version
        )  version_tmp
        WHERE
            info.id = version_tmp.udf_id
        AND info.id in (SELECT	udf_id FROM	linkis_ps_udf_shared_info WHERE user_name =	#{userName})
    </select>

    <select id="getUDFSByTreeIdAndUser" resultType="org.apache.linkis.udf.vo.UDFInfoVo">
        select t1.*,puv.path,puv.register_format,puv.use_format,puv.bml_resource_id,puv.bml_resource_version,puv.description
        from
        (select
        pu.*,1 as is_load from linkis_ps_udf_baseinfo pu
        where tree_id = #{arg0} and create_user = #{arg1} and udf_type in
        <foreach collection="arg2" open="(" separator="," close=")" item="item">
            #{item}
        </foreach> ) t1
        join
        (select udf_id,description,path,register_format,use_format,bml_resource_id,bml_resource_version
        from linkis_ps_udf_version as puv1 where bml_resource_version = (select max(puv2.bml_resource_version)
        from linkis_ps_udf_version as puv2 where puv1.udf_id =puv2.udf_id)) puv on t1.id=puv.udf_id
    </select>

    <select id="getUDFInfoByTreeId" resultType="org.apache.linkis.udf.vo.UDFInfoVo">
        select a.*,if(b.udf_id IS NULL,0,1) as is_load
        from
        (select t1.*,puv.path,puv.register_format,puv.use_format,puv.bml_resource_id,puv.bml_resource_version,puv.description
        from
        (select * from linkis_ps_udf_baseinfo where tree_id = #{arg0} and udf_type in
        <foreach collection="arg2" open="(" separator="," close=")" item="item">
            #{item}
        </foreach>) t1
        join
        (select udf_id,description,path,register_format,use_format,bml_resource_id,bml_resource_version
        from linkis_ps_udf_version as puv1 where bml_resource_version = (select max(puv2.bml_resource_version)
        from linkis_ps_udf_version as puv2 where puv1.udf_id =puv2.udf_id)) puv on t1.id=puv.udf_id
        ) a
        left join
        (select udf_id from linkis_ps_udf_user_load where user_name = #{arg1}) b
        on a.id=b.udf_id
    </select>

    <select id="getUDFInfoByIds" resultType="org.apache.linkis.udf.vo.UDFInfoVo">
        select pub.*, puv.path, puv.register_format, puv.use_format, puv.bml_resource_id, puv.bml_resource_version, puv.description
        from
            linkis_ps_udf_baseinfo pub
            join (
                select udf_id, max(bml_resource_version) as max_version
                from linkis_ps_udf_version
                where udf_id in <foreach collection="ids" open="(" separator="," close=")" item="item">#{item}</foreach>
                group by udf_id
            ) puvg on pub.id=puvg.udf_id
            join linkis_ps_udf_version puv on puvg.udf_id=puv.udf_id and puvg.max_version=puv.bml_resource_version
        where udf_type in <foreach collection="categoryCodes" open="(" separator="," close=")" item="item">#{item}</foreach>
    </select>

    <select id="getLoadedUDFs" resultMap="UDFInfoMap">
        select b.*,if(a.udf_id IS NULL,0,1) as is_load
        from
        (select udf_id from linkis_ps_udf_user_load where user_name = #{arg0}) a
        join
        linkis_ps_udf_baseinfo b
        on a.udf_id=b.id;
    </select>

    <select id="getLoadedUDFIds" resultType="java.lang.Long">
        select udf_id from linkis_ps_udf_user_load where user_name = #{arg0}
    </select>

    <select id="getSameSysCount" resultType="java.lang.Long">
        select count(1) from linkis_ps_udf_baseinfo where  udf_name=#{arg0}
        and tree_id in (select id from linkis_ps_udf_tree where user_name = 'sys')
    </select>

    <select id="getSameLoadCount" resultType="java.lang.Long">
        select count(1)
        from
        (select udf_id from linkis_ps_udf_user_load where user_name = #{arg0}) a
        join
        linkis_ps_udf_baseinfo b
        on a.udf_id=b.id
        where b.udf_name=#{arg1}
    </select>

    <select id="getSameJarUDF" resultMap="UDFInfoMap">
        select b.*,if(a.udf_id IS NULL,0,1) as is_load
        from
        (select udf_id from linkis_ps_udf_user_load where user_name = #{arg0}) a
        join
        linkis_ps_udf_baseinfo b
        on a.udf_id=b.id
        where udf_type=0
        and b.path like CONCAT('%',#{arg1})
    </select>

    <select id="getSameNameCountByUser" resultType="java.lang.Long">
        select
        count(1)
        from linkis_ps_udf_baseinfo
        where udf_name=#{arg0}
        and create_user in (#{arg1},'sys','bdp')
    </select>

    <select id="selectSharedUDFInfosByTreeIdAndUserName" resultMap="UDFInfoMap">
        SELECT bu.*,if(buuli.udf_id IS NULL,0,1) as is_load
        FROM linkis_ps_udf_shared_info busu
        JOIN linkis_ps_udf_baseinfo bu on bu.id = busu.udf_id
        LEFT JOIN linkis_ps_udf_user_load buuli on buuli.udf_id =bu.id and buuli.user_name=#{userName}
        where busu.user_name =#{userName} and tree_id=#{TreeId} and bu.udf_type in
        <foreach collection="categoryCodes" open="(" separator="," close=")" item="item">
            #{item}
        </foreach>
    </select>

    <select id="selectUDFManager" resultMap="UDFManagerMap">
        SELECT user_name
        from linkis_ps_udf_manager
        where user_name=#{userName}
    </select>

    <select id="selectAllUser" resultType="String">
        SELECT DISTINCT create_user from linkis_ps_udf_baseinfo
    </select>

    <select id="getShareSameNameCountByUser" resultType="Long">
        SELECT COUNT(1)
        FROM linkis_ps_udf_shared_info busu JOIN linkis_ps_udf_baseinfo bu
        on busu.udf_id = bu.id where bu.udf_name=#{udfName}
        and busu.user_name=#{userName}
    </select>

    <select id="getShareSameNameCountExcludeUser" resultType="Long">
        SELECT COUNT(1)
        FROM linkis_ps_udf_shared_info busu JOIN linkis_ps_udf_baseinfo bu
        on busu.udf_id = bu.id where bu.udf_name=#{udfName} and bu.create_user!=#{excludeUser}
        and busu.user_name=#{userName}
    </select>

    <insert id="insertUDFSharedUser">
        INSERT into linkis_ps_udf_shared_info(udf_id,user_name)
        VALUES (#{udfId},#{shareUserName})
    </insert>

    <update id="updateUDFIsShared">
        UPDATE linkis_ps_udf_baseinfo
        SET is_shared=#{isShared}
        where id=#{id}
    </update>

    <select id="selectAllShareUDFInfoIdByUDFId" resultType="Long">
        SELECT id
        FROM linkis_ps_udf_baseinfo
        where create_user =#{userName} and udf_name=#{udfName}
        and id in (select udf_id from linkis_ps_udf_shared_info where user_name = #{userName})
    </select>

    <update id="updateSharedUDFExpire">
        UPDATE linkis_ps_udf_baseinfo set is_expire = true where id=#{udfId}
    </update>

    <select id="selectAllShareUsersByUDFId" resultType="String">
        SELECT busu.user_name
        FROM linkis_ps_udf_shared_info busu
        JOIN linkis_ps_udf_baseinfo bu
        on busu.udf_id = bu.id
        where bu.id=#{udfId}
    </select>

    <select id="selectIdByUserName" resultType="Long">
        SELECT id
        FROM linkis_user
        where username =#{userName}
    </select>

    <insert id="insertSharedUser">
        insert into linkis_ps_udf_shared_info(udf_id,user_name)
        VALUES (#{udfId},#{addSharedUser})
    </insert>

    <delete id="deleteAllSharedUser">
        DELETE from linkis_ps_udf_shared_info where udf_id =#{udfId}
    </delete>

    <delete id="deleteSharedUser">
        DELETE from linkis_ps_udf_shared_info where udf_id =#{udfId} and user_name=#{removeSharedUser}
    </delete>

    <select id="getSharedUserCountByUdfId" resultType="java.lang.Long">
        select count(1) from linkis_ps_udf_shared_info where udf_id=#{udfId}
    </select>

    <select id="getUserLoadCountByUdfId" resultType="java.lang.Long">
        select count(1) from linkis_ps_udf_user_load where udf_id=#{udfId} and user_name!=#{owner}
    </select>

    <update id="updateLoadUser">
        update linkis_ps_udf_user_load set user_name=#{newUser},update_time =now() where udf_id=#{udfId} and user_name=#{oldUser}
    </update>

    <select id="getUdfInfoByPages" resultType="org.apache.linkis.udf.vo.UDFAddVo">
        select a.*,b.description,b.path,b.register_format,b.use_format,b.bml_resource_version from(
        select pu.*,put.name as directory
        from linkis_ps_udf_baseinfo pu
        join linkis_ps_udf_tree put
        on pu.tree_id=put.id
        <where>
            <if test="1 == 1">1 = 1</if>
            <if test="createUser != null">and pu.create_user = #{createUser}</if>
            <if test="udfName != null">and pu.udf_name like CONCAT('%',#{udfName},'%')</if>
            <if test="udfTypes != null">and pu.udf_type in
                <foreach collection="udfTypes" open="(" close=")" item="item" separator=",">
                    #{item}
                </foreach>
            </if>
        </where>
        ) a join
        (select udf_id,description,path,register_format,use_format,bml_resource_version
        from linkis_ps_udf_version as puv1 where bml_resource_version = (select max(puv2.bml_resource_version)
        from linkis_ps_udf_version as puv2 where puv1.udf_id =puv2.udf_id)) b
        on a.id=b.udf_id order by id desc
    </select>

    <select id="getLatesetPublishedUDF" resultType="org.apache.linkis.udf.vo.UDFInfoVo">
        select a.*, if(b.udf_id is NULL,0,1) as is_load from
        (select t1.*,puv.path,puv.register_format,puv.use_format,puv.bml_resource_id,puv.bml_resource_version,puv.description
        from
        (select pu.* from linkis_ps_udf_baseinfo pu where pu.id in (select udf_id from linkis_ps_udf_shared_info where user_name=#{userName})
        and pu.udf_type in
        <foreach collection="categoryCodes" open="(" separator="," close=")" item="item">
            #{item}
        </foreach> ) t1 join
        (select udf_id,description,path,register_format,use_format,bml_resource_id,bml_resource_version
        from linkis_ps_udf_version as puv1 where bml_resource_version = (select max(puv2.bml_resource_version)
        from linkis_ps_udf_version as puv2 where puv1.udf_id =puv2.udf_id and puv2.is_published=1)) puv on t1.id=puv.udf_id
        ) a
        left join
        (select udf_id from linkis_ps_udf_user_load where user_name = #{userName}) b
        on a.id=b.udf_id
    </select>

    <select id="getSharedUDFIdsByUser" resultType="java.lang.Long">
        select udf_id from linkis_ps_udf_shared_info where user_name=#{userName}
    </select>

    <select id="getUdfInfoByNameList" resultType="org.apache.linkis.udf.vo.UDFAddVo">
        select a.*,b.description,b.path,b.register_format,b.use_format,b.bml_resource_version from(
        select pu.*,put.name as directory
        from linkis_ps_udf_baseinfo pu join linkis_ps_udf_tree put  on pu.tree_id=put.id
        <where>
            <if test="1 == 1">1 = 1</if>
            <if test="createUser != null">and pu.create_user = #{createUser}</if>
            <if test="udfNameList != null">and pu.udf_name in
                <foreach collection="udfNameList" open="(" close=")" item="item" separator=",">
                    #{item}
                </foreach>
            </if>
        </where>
        ) a join
        (select udf_id,description,path,register_format,use_format,bml_resource_version
        from linkis_ps_udf_version as puv1 where bml_resource_version = (select max(puv2.bml_resource_version)
        from linkis_ps_udf_version as puv2 where puv1.udf_id =puv2.udf_id)
        ) b on a.id=b.udf_id
        order by id desc
    </select>
</mapper>